{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to OMCP","text":""},{"location":"#what-is-omcp","title":"What is OMCP?","text":"<p>OMCP (OMOP Model Context Protocol) is an open-source server that enables Large Language Models (LLMs) to interact with healthcare databases that follow the OMOP Common Data Model. It provides a structured way for AI systems to:</p> <ul> <li>Query healthcare data with appropriate security and privacy controls</li> <li>Perform cohort discovery and selection</li> <li>Generate statistical analyses and insights from clinical data</li> <li>Maintain data lineage and provenance tracking</li> <li>Access standardized healthcare terminologies and concept mappings</li> </ul>"},{"location":"#omop-common-data-model","title":"OMOP Common Data Model","text":"<p>The Observational Medical Outcomes Partnership (OMOP) Common Data Model (CDM) is a standardized data model designed to organize healthcare data into a common structure. It enables systematic analysis across disparate observational databases and facilitates collaborative research in the healthcare domain.</p>"},{"location":"#model-context-protocol","title":"Model Context Protocol","text":"<p>The Model Context Protocol (MCP) is a framework that enables structured interaction between Large Language Models (LLMs) and databases. OMCP combines this protocol with the OMOP data model to create a powerful system for healthcare data analysis.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Secure API Layer: Controlled access to OMOP CDM databases with authentication and authorization</li> <li>LLM-Friendly Interface: Structured protocols for AI models to interact with healthcare data</li> <li>OMOP CDM Integration: Seamless connection to any OMOP-compliant database</li> <li>Query Translation: Converts natural language or structured requests into optimized SQL</li> <li>Data Governance: Ensures compliance with healthcare data regulations like HIPAA</li> <li>Extensible Architecture: Support for plugins and custom extensions</li> </ul>"},{"location":"#use-cases","title":"Use Cases","text":"<ul> <li>Clinical research and cohort discovery</li> <li>Population health analytics</li> <li>Healthcare quality measurement</li> <li>Drug safety surveillance</li> <li>Clinical decision support</li> <li>Medical knowledge extraction</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>See our Installation Guide to set up OMCP in your environment.</p>"},{"location":"#architecture","title":"Architecture","text":"<p>OMCP sits between LLMs and OMOP CDM databases, providing a structured, secure interface for AI models to query and analyze healthcare data without direct database access.</p> <pre><code>+-------+     +--------------+     +----------------+\n|  LLM  | &lt;-&gt; | OMCP Server  | &lt;-&gt; | OMOP Database  |\n+-------+     +--------------+     +----------------+\n             /                \\\n   Natural Language      Structured Queries\n     Requests            &amp; Data Validation\n</code></pre>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>GitHub Repository</li> <li>Community Forum</li> <li>Issue Tracker</li> <li>Contributing Guidelines</li> </ul>"},{"location":"#license","title":"License","text":"<p>OMCP is available under the MIT License.</p>"},{"location":"contributing/","title":"Contributing to OMCP \ud83e\udd1d","text":"<p>Thank you for your interest in contributing to OMCP (OMOP Model Context Protocol Server)! This document provides guidelines and instructions to help you get started with contributing to the project.</p>"},{"location":"contributing/#repository","title":"Repository \ud83d\udcc2","text":"<p>The OMCP project is hosted on GitHub: - Repository: https://github.com/fastomop/omcp - Issue Tracker: https://github.com/fastomop/omcp/issues</p>"},{"location":"contributing/#ways-to-contribute","title":"Ways to Contribute \ud83c\udf1f","text":"<p>There are many ways to contribute to OMCP:</p> <ul> <li>Reporting bugs and issues</li> <li>Suggesting new features or improvements</li> <li>Improving documentation</li> <li>Submitting code changes and fixes</li> <li>Helping other users in discussions</li> <li>Testing pre-release versions</li> </ul>"},{"location":"contributing/#development-setup","title":"Development Setup \ud83d\udcbb","text":"<ol> <li> <p>Fork the repository on GitHub</p> </li> <li> <p>Clone your fork locally:    <pre><code>git clone https://github.com/YOUR-USERNAME/omcp.git\ncd omcp\n</code></pre></p> </li> <li>Set up a development environment:    <pre><code>uv venv .venv\nsource .venv/bin/activate\n</code></pre></li> <li>Install dependencies with development extras:    <pre><code>uv sync --dev --extra duckdb\n</code></pre></li> <li>Set up pre-commit hooks:    <pre><code>pre-commit install\n</code></pre></li> </ol>"},{"location":"contributing/#development-workflow","title":"Development Workflow \ud83d\udd04","text":"<ol> <li> <p>Create a new branch for your feature or fix:    <pre><code>git checkout -b feature-or-fix-name\n</code></pre></p> </li> <li> <p>Make your changes following our coding standards</p> </li> <li> <p>Run the tests to ensure your changes don't break existing functionality</p> </li> <li> <p>Update documentation if necessary</p> </li> <li> <p>Commit your changes with a descriptive message:    <pre><code>git commit -m \"Add feature X\" -m \"This feature adds the ability to do X, which helps with Y\"\n</code></pre></p> </li> <li> <p>Push your branch to GitHub:    <pre><code>git push origin feature-or-fix-name\n</code></pre></p> </li> <li> <p>Open a pull request against the main branch</p> </li> </ol>"},{"location":"contributing/#coding-standards","title":"Coding Standards \ud83d\udcdd","text":"<ul> <li>Follow PEP 8 style guidelines</li> <li>Use type hints</li> <li>Write docstrings for functions and classes</li> <li>Add tests for new functionality</li> <li>Keep commits focused and atomic</li> </ul>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process \ud83d\udd0d","text":"<ol> <li>Update the README.md or documentation with details of changes if needed</li> <li>Make sure all CI checks pass</li> <li>Get approval from at least one maintainer</li> <li>Once approved, a maintainer will merge your PR</li> </ol>"},{"location":"contributing/#reporting-bugs","title":"Reporting Bugs \ud83d\udc1b","text":"<p>When reporting bugs, please include:</p> <ul> <li>A clear, descriptive title</li> <li>Steps to reproduce the issue</li> <li>Expected behavior</li> <li>Actual behavior</li> <li>Any relevant logs or screenshots</li> <li>Your environment details (OS, Python version, etc.)</li> </ul>"},{"location":"contributing/#feature-requests","title":"Feature Requests \ud83d\udca1","text":"<p>Feature requests are welcome! When submitting a feature request:</p> <ul> <li>Describe the problem you're trying to solve</li> <li>Explain how your feature would solve it</li> <li>Provide examples of how the feature would be used</li> </ul>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct \ud83e\udd32","text":"<p>In all interactions, we expect all contributors to:</p> <ul> <li>Be respectful and inclusive</li> <li>Value different viewpoints and experiences</li> <li>Accept constructive criticism</li> <li>Focus on what's best for the community</li> <li>Show empathy towards other community members</li> </ul>"},{"location":"contributing/#questions","title":"Questions? \u2753","text":"<p>If you have any questions about contributing, feel free to:</p> <ul> <li>Open an issue on GitHub</li> <li>Reach out to the maintainers</li> <li>Ask in the project's discussion forums</li> </ul> <p>Thank you for contributing to OMCP! \ud83c\udf89</p>"},{"location":"installation/","title":"Installation Guide \ud83d\ude80","text":""},{"location":"installation/#pre-alpha-stage-warning","title":"\u26a0\ufe0f Pre-Alpha Stage Warning","text":"<p>OMCP is currently in pre-alpha development stage. This means:</p> <ul> <li>Features may change significantly between versions</li> <li>Breaking changes can occur without notice</li> <li>Documentation may be incomplete or outdated</li> <li>Bugs and unexpected behaviors are likely</li> </ul> <p>We appreciate your patience and feedback as we work toward a stable release!</p>"},{"location":"installation/#installing-from-github","title":"Installing from GitHub \ud83d\udce6","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Git</li> <li>Git LFS</li> <li> <p>uv (Python package installer) </p> <ul> <li>On MacOS/Linux <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre></li> <li>On Windows <pre><code>powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre></li> </ul> </li> <li> <p>Python 3.13 or higher (Let UV install and manage python versions within a virtual environment)</p> </li> </ul>"},{"location":"installation/#step-1-clone-the-repository","title":"Step 1: Clone the Repository","text":"<pre><code>git clone https://github.com/fastomop/omcp.git\ncd omcp\n</code></pre>"},{"location":"installation/#step-2-install-the-package-with-dependencies","title":"Step 2: Install the package with dependencies","text":"<p>UV automatically creates the virtual environment with the correct python version and dependencies.</p>"},{"location":"installation/#with-duckdb-support-default","title":"With DuckDB Support (Default)","text":"<pre><code>uv sync --extra duckdb\n</code></pre>"},{"location":"installation/#with-postgresql-support","title":"With PostgreSQL Support","text":"<p>Warning</p> <p>Not implemented yet.</p> <pre><code>uv sync --extra postgres\n</code></pre>"},{"location":"installation/#step-3-activate-the-virtual-environment","title":"Step 3: Activate the virtual environment","text":"<pre><code>source .venv/bin/activate  # On Windows use: .venv\\Scripts\\activate\n</code></pre>"},{"location":"installation/#using-the-synthetic-database","title":"Using the Synthetic Database \ud83d\uddc4\ufe0f","text":"<p>OMCP comes with a synthetic OMOP database (located at <code>/synthetic_data/synthea.duckdb</code>) for testing and development purposes. This database follows the OMOP Common Data Model and contains fictional patient data available at Synthea.</p>"},{"location":"installation/#retrieving-syntheaduckdb","title":"Retrieving Synthea.duckdb","text":"<p>Since the database is a rather large file, the actual database has been replaced by a Git LFS pointer, you should see something like this inside <code>synthea.duckdb</code>: <pre><code>version https://git-lfs.github.com/spec/v1\noid sha256:d753b619a8650c966ce219daa35b4126fb9307b790e49f0244646cb3b796feab\nsize 21508096\n</code></pre></p> <p>to retrieve the database:</p> <p><pre><code>git lfs install\n</code></pre> and then:</p> <pre><code>git lfs pull\n</code></pre>"},{"location":"installation/#setting-up-the-environment-variable","title":"Setting Up the Environment Variable","text":"<p>Create a <code>.env</code> file in your project root with the connection string:</p> <pre><code>echo 'DB_CONNECTION_STRING=\"duckdb:///full/path/to/omcp/synthetic_data/synthea.duckdb\"' &gt; .env\n</code></pre> <p>Or set it directly in your environment:</p> <pre><code># Linux/Mac\nexport DB_CONNECTION_STRING=\"duckdb:///full/path/to/omcp/synthetic_data/synthea.duckdb\"\n\n# Windows (Command Prompt)\nset DB_CONNECTION_STRING=duckdb:///full/path/to/omcp/synthetic_data/synthea.duckdb\n\n# Windows (PowerShell)\n$env:DB_CONNECTION_STRING=\"duckdb:///full/path/to/omcp/synthetic_data/synthea.duckdb\"\n</code></pre>"},{"location":"installation/#using-the-database-for-experiments","title":"Using the Database for Experiments","text":"<p>The synthetic database contains a complete OMOP CDM schema with fictional patient data. You can:</p> <ol> <li>Explore tables like <code>person</code>, <code>condition_occurrence</code>, <code>drug_exposure</code>, etc.</li> <li>Run queries against it to test your applications</li> <li>Use it as a sandbox for learning the OMOP data model</li> </ol> <p>It is easy to do this using the DuckDB UI by running the following command from the <code>/synthetic_data</code> directory.</p> <pre><code>duckdb -ui synthea.duckdb\n</code></pre> <p>Warning</p> <p>DuckDB does not allow multiple processes to open a connection to the database at the same time when at least one of them has write access. To avoid running into problems, close any open connections to the database before running the MCP server.</p>"},{"location":"installation/#integrating-with-claude-desktop","title":"Integrating with Claude Desktop \ud83e\udd16","text":"<p>OMCP provides a Model Context Protocol server that can integrate with Claude Desktop.</p>"},{"location":"installation/#step-1-install-claude-desktop","title":"Step 1: Install Claude Desktop","text":"<p>Download and install Claude Desktop from the official website. On Linux, use https://github.com/aaddrick/claude-desktop-debian/ or similar until an official release becomes available.</p>"},{"location":"installation/#step-2-configure-claude-desktop-to-use-omcp","title":"Step 2: Configure Claude Desktop to Use OMCP","text":"<ol> <li>Open or create the Claude Desktop configuration file:</li> </ol> <pre><code># Linux\nmkdir -p ~/.config/Claude\nnano ~/.config/Claude/claude_desktop_config.json\n</code></pre> <pre><code># macOS\nmkdir -p ~/Library/Application\\ Support/Claude\nnano ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n</code></pre> <pre><code># Windows\nnotepad %APPDATA%\\Claude\\claude_desktop_config.json\n</code></pre> <ol> <li>Add the following configuration:</li> </ol> <pre><code>{\n  \"mcpServers\": {\n    \"omop_mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/ABSOLUTE/PATH/TO/PARENT/FOLDER THAT CONTAINS main.py\",\n        \"run\",\n        \"main.py\"\n      ]\n    }\n  }\n}\n</code></pre> <p>Replace <code>/ABSOLUTE/PATH/TO/PARENT/FOLDER THAT CONTAINS main.py</code> with the actual path to your OMCP installation.</p>"},{"location":"installation/#step-3-launch-claude-desktop","title":"Step 3: Launch Claude Desktop","text":"<p>Start Claude Desktop and the OMCP server should automatically be available for use. You can verify the connection by asking Claude to query the OMOP database.</p>"},{"location":"installation/#integrating-with-localhost-models","title":"Integrating with Localhost models \ud83e\udd99","text":""},{"location":"installation/#step-1-install-ollama","title":"Step 1: Install Ollama","text":"<p>Download and install Ollama from the official website. To check if Ollama has been installed properly, open a terminal and type:</p> <pre><code>ollama --version\n</code></pre> <p>you should see something like this in your terminal: <code>ollama version is 0.6.8</code></p>"},{"location":"installation/#step-2-pull-a-model-from-ollama","title":"Step 2: Pull a model from Ollama","text":"<p>Go to the Ollama models and copy the name of the model you want to pull (e.g., cogito:14b), make sure the model you are pulling is compatible with the MCP tooling option. Next, type in the terminal:</p> <pre><code>ollama pull cogito:14b\n</code></pre> <p>The process will take a while depending on the size of the model, but when it finishes type in the terminal:</p> <pre><code>ollama list\n</code></pre> <p>if everything went well, you should see the model you have pulled from Ollama. In my case <code>cogito:14b</code>.</p>"},{"location":"installation/#step-3-end-user-interface-configuration","title":"Step 3: End-user interface configuration","text":"<p>We are going to use Librechat as the end-user interface.</p> <ol> <li> <p>In the OMCP project, navigate to the directory where the <code>main.py</code> file is located, go to the function <code>def main()</code> and change the <code>transport</code> from <code>stdio</code> to <code>sse</code>.</p> <pre><code>def main():\n\"\"\"Main function to run the MCP server.\"\"\"\n\n  mcp_app.run(\n      transport=\"sse\", #before was stdio\n  )\n</code></pre> </li> <li> <p>In the same directory where <code>main.py</code> is located, run the following command:</p> <pre><code>python main.py\n</code></pre> <p>You should see something like this in the terminal: <pre><code>INFO:     Started server process [96250]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\nINFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)\n</code></pre> This means that we are exposing our MCP Tool in the port <code>http://0.0.0.0:8000</code> so other services can consume it.</p> </li> <li> <p>Download and install Docker Desktop. Once Docker is installed, open Docker Desktop to ensure it is running.</p> </li> <li> <p>In a separate terminal or IDE window, clone the Librechat repository:</p> <pre><code>git clone https://github.com/danny-avila/LibreChat.git\n</code></pre> </li> <li> <p>In the Librechat repository, navigate to the project directory and create a configuration <code>.env</code> file, you can create the file by:</p> <pre><code>cp .env.example .env\n</code></pre> </li> <li> <p>In the same project directory, create a <code>.yaml</code> file, by:</p> <pre><code>cp libreachat.example.yaml librechat.yaml\n</code></pre> </li> <li> <p>Add the following code at the end of the <code>librechat.yaml</code> file we created above:</p> <pre><code># MCP servers\n mcpServers:\n   omop_mcp:\n     # type: sse # type can optionally be omitted\n     url: http://host.docker.internal:8000/sse\n     timeout: 60000  # 1 minute timeout for this server, this is the default timeout for MCP servers.\n</code></pre> <p>Additionally, under your <code>custom</code> provider section (endpoints), add an Ollama endpoint configuration. Adjust <code>models.default</code> to match the models you actually pulled with Ollama:</p> <pre><code>custom:\n  endpoints:\n    - name: \"Ollama\"\n      apiKey: \"ollama\"\n      baseURL: \"http://host.docker.internal:11434/v1/\"\n      models:\n        default: [\"cogito:14b\",\"llama3.2:3b\", \"qwen2.5-coder:3b\"]\n        fetch: false\n      titleConvo: true\n      titleModel: \"current_model\"\n      summarize: false\n      summaryModel: \"current_model\"\n      forcePrompt: false\n      modelDisplayLabel: \"Ollama\"\n      addParams:\n        stop:\n          - \"&lt;|start_header_id|&gt;\"\n          - \"&lt;|end_header_id|&gt;\"\n          - \"&lt;|eot_id|&gt;\"\n          - \"&lt;|reserved_special_token&gt;\"\n</code></pre> <p>Note: Replace the model names in <code>models.default</code> with the ones you have downloaded locally via Ollama.</p> </li> <li> <p>In the project directory, run:     <pre><code>docker compose up -d\n</code></pre>     If successful, you should see something like this:     <pre><code>[+] Running 5/5\n \u2714 Container vectordb          Started\n \u2714 Container chat-meilisearch  Started\n \u2714 Container chat-mongodb      Started\n \u2714 Container rag_api           Started\n \u2714 Container LibreChat         Started\n</code></pre></p> </li> <li> <p>Finally, go to the browser and type <code>localhost:3080</code>, if it is the first time using Librechat, you need to create an account. Then select the model you pulled, in my case <code>cogito:14b</code> and in the chat, just next to the <code>Code Interpreter</code> you should see the MCP Tool, click on it and select <code>omop_mcp</code>.</p> <p>You should see something like this: </p> </li> </ol>"},{"location":"installation/#troubleshooting","title":"Troubleshooting \ud83d\udd27","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":""},{"location":"installation/#duckdb-connection-problems","title":"DuckDB Connection Problems","text":"<p>If you encounter errors connecting to the DuckDB database:</p> <ol> <li>Verify the file path in your connection string is correct</li> <li>Ensure the database file exists at the specified location</li> <li>Check permissions on the database file</li> </ol>"},{"location":"installation/#python-version-issues","title":"Python Version Issues","text":"<p>OMCP requires Python 3.13+. To check your Python version:</p> <pre><code>python --version\n</code></pre>"},{"location":"installation/#claude-desktop-integration-issues","title":"Claude Desktop Integration Issues","text":"<p>If Claude Desktop doesn't recognize the OMCP server:</p> <ol> <li>Verify the configuration file is in the correct location</li> <li>Ensure the path to main.py is correct</li> <li>Restart Claude Desktop</li> </ol>"},{"location":"installation/#getting-help","title":"Getting Help \ud83d\udcac","text":"<p>If you encounter issues not covered here:</p> <ul> <li>Open an issue on our GitHub repository</li> <li>Join our community discussions</li> <li>Check the FAQ section in our documentation</li> </ul>"},{"location":"installation/#next-steps","title":"Next Steps \ud83d\udc63","text":"<p>Now that you have OMCP installed and configured:</p> <ul> <li>Explore the Contributing Guidelines if you'd like to help improve OMCP</li> </ul>"},{"location":"sql/","title":"SQL Tools Overview","text":"<p>The OMCP project provides robust SQL query capabilities specifically designed for working with the OMOP Common Data Model (CDM). These tools allow you to safely query OMOP databases while enforcing security policies and validation rules.</p>"},{"location":"sql/#architecture","title":"Architecture","text":"<p>The SQL tools system consists of three primary components:</p> <pre><code>graph TD\n    A[main.py - MCP Tools] --&gt; B[db.py - OmopDatabase]\n    B --&gt; C[sql_validator.py - SQLValidator]\n    B --&gt; D[Database Connection]</code></pre> <ol> <li>MCP Tools (<code>main.py</code>) - Exposes SQL functionality as Model Context Protocol (MCP) tools</li> <li>Database Layer (<code>db.py</code>) - Manages database connections and query execution</li> <li>SQL Validator (<code>sql_validator.py</code>) - Ensures queries meet security and schema requirements</li> </ol>"},{"location":"sql/#available-tools","title":"Available Tools","text":"<p>OMCP exposes two main SQL-related tools via the MCP interface:</p>"},{"location":"sql/#get_information_schema","title":"Get_Information_Schema","text":"<p>Retrieves metadata about the available tables and columns in the OMOP database.</p> <pre><code>@mcp_app.tool(\n    name=\"Get_Information_Schema\",\n    description=\"Get the information schema of the OMOP database.\"\n)\ndef get_information_schema() -&gt; mcp.types.CallToolResult:\n    # ...implementation...\n</code></pre>"},{"location":"sql/#select_query","title":"Select_Query","text":"<p>Executes SELECT queries against the OMOP database, with validation.</p> <pre><code>@mcp_app.tool(\n    name=\"Select_Query\",\n    description=\"Execute a select query against the OMOP database.\"\n)\ndef read_query(query: str) -&gt; mcp.types.CallToolResult:\n    # ...implementation...\n</code></pre>"},{"location":"sql/#security-features","title":"Security Features","text":"<p>The SQL tools implement several security measures:</p> <ul> <li>SQL Validation - Only SELECT statements are allowed</li> <li>Schema Restriction - Queries are limited to approved OMOP tables</li> <li>Column Filtering - Sensitive columns can be blocked</li> <li>Row Limiting - Results are limited to prevent resource exhaustion</li> </ul>"},{"location":"sql/#supported-databases","title":"Supported Databases","text":"<p>Currently, the following databases are fully supported:</p> <ul> <li>DuckDB (default)</li> </ul> <p>Future support is planned for: - PostgreSQL - And potentially other database systems</p> <p>For more detailed information about each component, see the following pages:</p> <ul> <li>SQL Validation - Details on how queries are validated</li> <li>Query Execution - How queries are executed against the database</li> </ul>"},{"location":"sql/execution/","title":"Query Execution","text":"<p>This page explains how SQL queries are executed against OMOP databases in the OMCP project. The database layer handles connections, validation, and query execution, ensuring secure and efficient data access.</p>"},{"location":"sql/execution/#omopdatabase-class","title":"OmopDatabase Class","text":"<p>The core of database connectivity is the <code>OmopDatabase</code> class in the <code>db.py</code> module. This class:</p> <ol> <li>Establishes connections to various database backends</li> <li>Validates SQL queries through the <code>SQLValidator</code></li> <li>Executes safe queries and returns formatted results</li> </ol>"},{"location":"sql/execution/#initialization","title":"Initialization","text":"<p>The <code>OmopDatabase</code> is initialized with connection details and security parameters:</p> <pre><code>def __init__(\n    self,\n    connection_string: str,\n    read_only=True,\n    cdm_schema: str = \"cdm\",\n    vocab_schema: str = \"vocab\",\n    allow_source_value_columns: bool = False,\n    allowed_tables: Optional[List[str]] = None,\n):\n</code></pre> Parameter Description <code>connection_string</code> Database URI (e.g., <code>duckdb://path/to/file.duckdb</code>) <code>read_only</code> Whether to open the connection in read-only mode <code>cdm_schema</code> Schema name for clinical data tables <code>vocab_schema</code> Schema name for vocabulary tables <code>allow_source_value_columns</code> Whether to allow querying source value columns <code>allowed_tables</code> List of specific tables to allow (defaults to standard OMOP tables)"},{"location":"sql/execution/#database-connection","title":"Database Connection","text":"<p>The class supports multiple database backends through the Ibis framework, with DuckDB as the current default implementation:</p> <pre><code>if connection_string.startswith(\"duckdb://\"):\n    self.conn = ibis.duckdb.connect(\n        connection_string.replace(\"duckdb://\", \"\"),\n        read_only=read_only\n    )\n# Support for other databases (PostgreSQL, etc.) is planned\n</code></pre>"},{"location":"sql/execution/#executing-queries","title":"Executing Queries","text":"<p>The <code>read_query()</code> method is the primary interface for executing SQL queries:</p> <pre><code>@lru_cache(maxsize=128)\ndef read_query(self, query: str) -&gt; str:\n    \"\"\"\n    Execute a read-only SQL query and return results as CSV\n    \"\"\"\n    # Validation and execution implementation\n</code></pre> <p>This method:</p> <ol> <li>Validates the SQL through <code>sql_validator.validate_sql()</code></li> <li>If validation passes, executes the query through Ibis</li> <li>Applies row limits to prevent performance issues</li> <li>Returns results in CSV format</li> <li>Handles errors and exceptions</li> </ol>"},{"location":"sql/execution/#caching","title":"Caching","text":"<p>Query results are cached using Python's <code>lru_cache</code> decorator to improve performance:</p> <pre><code>@lru_cache(maxsize=128)\ndef read_query(self, query: str) -&gt; str:\n    # Implementation...\n</code></pre> <p>This caches up to 128 recent query results, avoiding redundant database calls.</p>"},{"location":"sql/execution/#information-schema-access","title":"Information Schema Access","text":"<p>The <code>get_information_schema()</code> method provides metadata about tables and columns:</p> <pre><code>@lru_cache(maxsize=128)\ndef get_information_schema(self) -&gt; Dict[str, List[str]]:\n    \"\"\"Get the information schema of the database.\"\"\"\n    # Implementation...\n</code></pre> <p>This method returns table schema information as CSV, filtered according to security settings.</p>"},{"location":"sql/execution/#error-handling","title":"Error Handling","text":"<p>When errors occur during execution, specific exception types are raised:</p> <ul> <li><code>ExceptionGroup</code> for validation errors (containing detailed validation failure information)</li> <li><code>QueryError</code> for execution failures</li> <li><code>ConnectionError</code> for database connection issues</li> </ul>"},{"location":"sql/execution/#row-limiting","title":"Row Limiting","text":"<p>To prevent resource exhaustion, a row limit is applied to all queries:</p> <pre><code>result = self.conn.sql(query).limit(self.row_limit)  # Default: 1000 rows\n</code></pre> <p>This limit can be configured during initialization.</p>"},{"location":"sql/execution/#integration-with-mcp-tools","title":"Integration with MCP Tools","text":"<p>The database functionality is exposed through MCP tools in <code>main.py</code>:</p> <ul> <li><code>Get_Information_Schema</code> - Calls the <code>get_information_schema()</code> method</li> <li><code>Select_Query</code> - Calls the <code>read_query()</code> method with user-provided SQL</li> </ul>"},{"location":"sql/execution/#usage-example","title":"Usage Example","text":"<p>Here's an example of how to query an OMOP database using this system:</p> <pre><code># Initialize database connection\ndb = OmopDatabase(\n    connection_string=\"duckdb:///path/to/omop.duckdb\",\n    read_only=True\n)\n\n# Execute a query and get results as CSV\ntry:\n    results_csv = db.read_query(\"\"\"\n        SELECT p.person_id, p.year_of_birth, c.concept_name as gender\n        FROM person p\n        JOIN concept c ON p.gender_concept_id = c.concept_id\n        LIMIT 10\n    \"\"\")\n    print(results_csv)\nexcept Exception as e:\n    print(f\"Query failed: {e}\")\n</code></pre> <p>Best Practice</p> <p>Always use the JOIN syntax to resolve concept IDs to their human-readable names from the concept table rather than using source value columns directly.</p>"},{"location":"sql/validation/","title":"SQL Validation","text":"<p>The SQL validation system ensures that queries sent to the OMOP database are safe, secure, and follow proper schema restrictions. The core of this system is the <code>SQLValidator</code> class in the <code>sql_validator.py</code> module.</p>"},{"location":"sql/validation/#sqlvalidator-class","title":"SQLValidator Class","text":"<p>The <code>SQLValidator</code> class performs multiple validation checks on SQL queries before they're executed against the database.</p>"},{"location":"sql/validation/#initialization","title":"Initialization","text":"<p>The validator can be configured with several parameters to control validation behavior:</p> <pre><code>def __init__(\n    self,\n    allow_source_value_columns: bool = False,\n    exclude_tables: t.List = None,\n    exclude_columns: t.List = None,\n    from_dialect: str = \"postgres\",\n    to_dialect: str = \"duckdb\",\n):\n</code></pre> Parameter Type Default Description <code>allow_source_value_columns</code> bool <code>False</code> Whether to allow queries with source value columns <code>exclude_tables</code> List[str] <code>None</code> Tables that can't be queried <code>exclude_columns</code> List[str] <code>None</code> Columns that can't be queried <code>from_dialect</code> str <code>\"postgres\"</code> Source SQL dialect <code>to_dialect</code> str <code>\"duckdb\"</code> Target SQL dialect"},{"location":"sql/validation/#validation-process","title":"Validation Process","text":"<p>When a query is submitted, the <code>validate_sql()</code> method performs several checks:</p> <ol> <li>Parses the SQL using SQLGlot</li> <li>Verifies it's a SELECT statement (not INSERT, UPDATE, etc.)</li> <li>Extracts tables and columns referenced in the query</li> <li>Validates tables against the allowed OMOP table list</li> <li>Checks for excluded tables and columns</li> <li>Inspects for source value columns if restricted</li> </ol> <p>The validation process returns a list of errors, or an empty list if the query is valid.</p>"},{"location":"sql/validation/#validation-checks","title":"Validation Checks","text":""},{"location":"sql/validation/#select-statement-check","title":"SELECT Statement Check","text":"<p>Only SELECT statements are allowed for security reasons:</p> <pre><code>def _check_is_select_query(self, parsed_sql: exp.Expression) -&gt; ex.NotSelectQueryError:\n    if not isinstance(parsed_sql, exp.Select):\n        return ex.NotSelectQueryError(\n            \"Only SELECT statements are allowed for security reasons.\"\n        )\n</code></pre>"},{"location":"sql/validation/#omop-table-check","title":"OMOP Table Check","text":"<p>Ensures queries only reference valid OMOP CDM tables:</p> <pre><code>def _check_is_omop_table(self, tables: t.List[exp.Table]) -&gt; ex.TableNotFoundError:\n    not_omop_tables = [\n        table.name.lower()\n        for table in tables\n        if table.name.lower() not in OMOP_TABLES\n    ]\n    if not_omop_tables:\n        return ex.TableNotFoundError(\n            f\"Tables not found in OMOP CDM: {', '.join(not_omop_tables)}\"\n        )\n</code></pre> <p>The validator maintains a list of valid OMOP tables:</p> <pre><code>OMOP_TABLES = [\n    \"care_site\",\n    \"cdm_source\",\n    \"concept\",\n    # ... other OMOP tables\n]\n</code></pre>"},{"location":"sql/validation/#excluded-tables-and-columns","title":"Excluded Tables and Columns","text":"<p>The validator can be configured to block specific tables and columns:</p> <pre><code>def _check_unauthorized_tables(self, tables: t.List[exp.Table]) -&gt; ex.UnauthorizedTableError:\n    unauthorized_tables = [\n        table.name.lower()\n        for table in tables\n        if table.name.lower() in self.exclude_tables\n    ]\n\n    if unauthorized_tables:\n        return ex.UnauthorizedTableError(\n            f\"Unauthorized tables in query: {', '.join(unauthorized_tables)}\"\n        )\n</code></pre>"},{"location":"sql/validation/#source-value-columns","title":"Source Value Columns","text":"<p>For privacy and security, source value columns can be restricted:</p> <pre><code>def _check_source_value_columns(self, columns: t.List[exp.Column]) -&gt; ex.UnauthorizedColumnError:\n    if self.allow_source_value_columns:\n        return None\n\n    source_value_columns = [\n        column.name.lower()\n        for column in columns\n        if column.name.lower().endswith(\"_source_value\")\n        or column.name.lower().endswith(\"_source_concept_id\")\n    ]\n\n    if source_value_columns:\n        return ex.UnauthorizedColumnError(\n            f\"Source value columns are not allowed: {', '.join(source_value_columns)}. \"\n            # ... additional message ...\n        )\n</code></pre>"},{"location":"sql/validation/#error-handling","title":"Error Handling","text":"<p>The validator uses custom exception types from <code>omcp.exceptions</code> to provide clear error messages:</p> <ul> <li><code>TableNotFoundError</code> - When tables don't exist in the OMOP schema</li> <li><code>UnauthorizedTableError</code> - When queries use forbidden tables</li> <li><code>UnauthorizedColumnError</code> - When queries use forbidden columns</li> <li><code>NotSelectQueryError</code> - When non-SELECT statements are attempted</li> </ul>"},{"location":"sql/validation/#sqlglot-integration","title":"SQLGlot Integration","text":"<p>The validator leverages SQLGlot for SQL parsing and analysis, which provides:</p> <ul> <li>Robust SQL parsing across dialects</li> <li>AST (Abstract Syntax Tree) traversal</li> <li>Query component extraction</li> </ul> <p>Dialect Support</p> <p>While the default configuration is set for PostgreSQL as the input dialect and DuckDB as the output dialect, this can be customized during initialization.</p>"}]}